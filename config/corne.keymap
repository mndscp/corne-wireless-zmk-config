/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&lt { tapping-term-ms = <260>; };

/ {
    combos {
        compatible = "zmk,combos";

        close {
            bindings = <&kp LC(W)>;
            key-positions = <3 16>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <26 27>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <26 28>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <28 27>;
        };

        copyall {
            bindings = <&cpya>;
            key-positions = <25 28>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <14 15 16>;
        };

        selectall {
            bindings = <&kp LC(A)>;
            key-positions = <26 27 28>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <14 15>;
        };
    };

    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mod right";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <320>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 3 39 40 41>;
            hold-trigger-on-release;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <320>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 36 37 38>;
        };

        hmls: hmls {
            compatible = "zmk,behavior-hold-tap";
            label = "HMLS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 36 37 38>;
            quick-tap-ms = <0>;
        };

        hmrs: hmrs {
            compatible = "zmk,behavior-hold-tap";
            label = "HMRS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 3 39 40 41>;
            hold-trigger-on-release;
            quick-tap-ms = <0>;
        };

        num: num {
            compatible = "zmk,behavior-hold-tap";
            label = "NUM";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <320>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
        };
    };

    macros {
        cpya: cpya {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(A) &kp LC(C)>;
            label = "CPYA";
        };

        smiley1: smiley1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp RPAR>;
            label = "SMILEY1";
        };

        smiley2: smiley2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp SPACE &kp LS(D)>;
            label = "SMILEY2";
        };

        smiley3: smiley3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp SPACE &kp LS(D) &kp LS(D) &kp LS(D)>;
            label = "SMILEY3";
        };

        smiley4: smiley4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CARET &kp UNDER &kp CARET>;
            label = "SMILEY4";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&lt 3 TAB     &kp Q            &kp W            &num 2 E      &kp R               &kp T          &kp Y        &kp U                &num 2 I      &kp O            &kp P               &kp BSPC
&lt 4 ESCAPE  &hml LEFT_GUI A  &hml LEFT_ALT S  &hml LCTRL D  &hmls LEFT_SHIFT F  &kp G          &kp H        &hmrs RIGHT_SHIFT J  &hmr LCTRL K  &hmr LEFT_ALT L  &hmr LEFT_GUI SEMI  &kp SQT
&sk LSHFT     &kp Z            &kp X            &kp C         &kp V               &mt QMARK B    &kp N        &kp M                &kp COMMA     &kp DOT          &kp FSLH            &kp ENTER
                                                &kp MINUS     &lt 2 ENTER         &lt 1 SPACE    &lt 5 SPACE  &caps_word           &kp LANG1
            >;
        };

        navigation {
            bindings = <
&kp PRINTSCREEN  &kp LS(LC(C))  &kp LS(TAB)          &kp SPACE            &kp TAB               &kp LA(TAB)      &kp LEFT_PARENTHESIS  &kp BSPC   &kp UP     &kp DEL    &kp RPAR  &trans
&trans           &kp LG(Y)      &mt LEFT_ALT ESCAPE  &mt LCTRL BACKSPACE  &mt LEFT_SHIFT ENTER  &kp LC(D)        &kp HOME              &kp LEFT   &kp DOWN   &kp RIGHT  &kp END   &trans
&trans           &trans         &kp LC(Y)            &kp LC(Z)            &kp DEL               &kp LS(LC(D))    &trans                &kp LC(C)  &kp LC(V)  &kp LC(X)  &trans    &trans
                                                     &trans               &trans                &trans           &trans                &trans     &trans
            >;
        };

        numbers {
            bindings = <
&trans          &kp LA(LC(LG(NUMBER_1)))  &kp LG(LC(LA(NUMBER_2)))  &kp LA(LC(LG(NUMBER_3)))  &kp LA(LC(LG(NUMBER_4)))  &kp LA(LC(LG(N5)))    &kp ASTRK  &kp N7   &kp N8     &kp N9  &trans     &trans
&trans          &trans                    &trans                    &trans                    &mt LEFT_SHIFT SPACE      &trans                &kp MINUS  &kp N4   &kp N5     &kp N6  &kp DOT    &trans
&bt BT_CLR_ALL  &kp LG(LC(LA(NUMBER_1)))  &kp LG(LA(LC(NUMBER_2)))  &kp LG(LC(LA(NUMBER_3)))  &kp LG(LC(LA(NUMBER_4)))  &trans                &kp PLUS   &kp N1   &kp N2     &kp N3  &kp COMMA  &trans
                                                                    &trans                    &trans                    &mt LCTRL NUMBER_0    &kp N0     &kp DOT  &kp COMMA
            >;
        };

        tab {
            bindings = <
&none   &kp LA(LC(LG(Q)))  &kp LG(LC(LA(W)))  &kp LG(LC(LA(E)))  &kp LG(LC(LA(R)))  &kp LG(LC(LA(T)))    &kp LG(LC(LA(Y)))  &kp LG(LC(LA(U)))  &kp LG(LC(LA(I)))      &kp LG(LC(LA(O)))    &kp LG(LC(LA(P)))     &bt BT_CLR_ALL
&trans  &kp LG(LC(LA(A)))  &kp LG(LC(LA(S)))  &kp LG(LC(LA(D)))  &kp LG(LC(LA(F)))  &kp LG(LC(LA(G)))    &kp LG(LA(LC(H)))  &kp LG(LC(LA(J)))  &kp LG(LC(LA(K)))      &kp LG(LC(LA(L)))    &kp LG(LC(LA(SEMI)))  &kp LA(LG(LC(APOS)))
&trans  &kp LG(LC(LA(Z)))  &kp LG(LC(LA(X)))  &kp LG(LC(LA(C)))  &kp LG(LC(LA(V)))  &kp LG(LC(LA(B)))    &kp LG(LC(LA(N)))  &kp LG(LC(LA(M)))  &kp LG(LC(LA(COMMA)))  &kp LG(LC(LA(DOT)))  &kp LG(LC(LA(FSLH)))  &trans
                                              &trans             &kp LC(LS(N))      &kp F12              &trans             &trans             &trans
            >;
        };

        escape {
            bindings = <
&trans  &kp LC(Q)  &kp LC(W)  &kp LC(E)  &kp LC(R)  &kp LC(T)    &trans  &trans  &trans  &trans  &trans  &trans
&none   &kp LC(A)  &kp LC(S)  &kp LC(D)  &kp LC(F)  &kp LC(G)    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(B)    &trans  &trans  &trans  &trans  &trans  &trans
                              &trans     &kp LC(B)  &kp LC(H)    &trans  &trans  &trans
            >;
        };

        symbols {
            bindings = <
&trans  &trans    &kp AT     &kp EXCL   &kp DQT    &kp LBKT    &kp RBKT  &kp AMPS  &kp ASTRK  &kp TILDE  &trans  &trans
&trans  &trans    &kp HASH   &kp QMARK  &kp SQT    &kp LPAR    &kp RPAR  &kp DLLR  &kp PRCNT  &kp CARET  &trans  &trans
&trans  &kp PIPE  &kp SLASH  &kp COLON  &kp GRAVE  &kp LBRC    &kp RBRC  &kp LT    &kp EQUAL  &kp GT     &trans  &trans
                             &trans     &trans     &kp RET     &trans    &trans    &trans
            >;
        };
    };
};
